.586 
.MODEL FLAT, C 
.CODE 

PUBLIC C second_dist 
second_dist PROC C result1:dword, intervals: dword, result2: dword, x_max: dword, x_min: dword, n_int: dword Зачем сюда передаётся x_max?

push esi 
push edi 

mov esi, intervals 
mov edi, result2 
mov ecx, n_int 

G: 
mov eax, [esi] ; левая граница интервала Поменять eax и ebx местами
mov ebx, [esi + 4] ; правая граница 

cmp eax, x_min ; если левая граница >= x_min 
jge F2 
mov eax, 0 ; иначе, eax = 0, начало массива result1 

sub ebx, x_min ; если длина интервала = 0 
jle F1 Заменить на jle F1
jmp F5;иначе перейти к обработке не 0 интервала 

F2: 
sub ebx, eax ; количество элементов в интервале 
cmp ebx, 0 ; если длина интервала = 0 
je F1 
sub eax, x_min ; индекс первого элемента из текущего интервала в массиве result1 

F5: 
push esi ;сохраняем регистры 
push ecx Удалить

mov ecx, ebx ; количество элементов из result1 по которым нужно пройти 
mov esi, result1 ; массив 
mov ebx, 0 ; считает сумму подходящих элементов 

G2: ; цикл, считает сумму элементов, входящих в интервал 
add ebx, [esi + 4*eax];к ebx добавляем количество попаданий в очередной еденичный интервал 
inc eax Удалить
loop G2 

pop ecx;восстановление регистра 


cmp ecx, 1 ; если обрабатывали не последний элемент, то записываем сумму в массив результат 
jne F3 
add ebx, [esi + 4*eax] ; иначе добавляем еще элемент последней правой скобки 

F3: 

mov [edi], ebx ; записываем результат 
pop esi;восстановление регистра 
jmp F1 


F1: 
add edi, 4 ; двигаемся к след. элементам массивов 
add esi, 4 

loop G 


pop edi
pop esi 

ret 
second_dist ENDP 
END 
