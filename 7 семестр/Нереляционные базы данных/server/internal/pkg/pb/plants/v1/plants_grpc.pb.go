// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: plants/v1/plants.proto

package plants_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlantsAPI_GetPlantsWithCareRulesV1_FullMethodName = "/plants.v1.PlantsAPI/GetPlantsWithCareRulesV1"
	PlantsAPI_CreateNewCareRuleV1_FullMethodName      = "/plants.v1.PlantsAPI/CreateNewCareRuleV1"
	PlantsAPI_GetPlantByIdV1_FullMethodName           = "/plants.v1.PlantsAPI/GetPlantByIdV1"
	PlantsAPI_GetCareRuleV1_FullMethodName            = "/plants.v1.PlantsAPI/GetCareRuleV1"
	PlantsAPI_CreatePlantV1_FullMethodName            = "/plants.v1.PlantsAPI/CreatePlantV1"
	PlantsAPI_GetPlantsForTradeV1_FullMethodName      = "/plants.v1.PlantsAPI/GetPlantsForTradeV1"
	PlantsAPI_GetPlantsV1_FullMethodName              = "/plants.v1.PlantsAPI/GetPlantsV1"
	PlantsAPI_BuyPlantV1_FullMethodName               = "/plants.v1.PlantsAPI/BuyPlantV1"
	PlantsAPI_GetBoughtPlantsV1_FullMethodName        = "/plants.v1.PlantsAPI/GetBoughtPlantsV1"
	PlantsAPI_GetTradedPlantsV1_FullMethodName        = "/plants.v1.PlantsAPI/GetTradedPlantsV1"
	PlantsAPI_GetActivePlantsV1_FullMethodName        = "/plants.v1.PlantsAPI/GetActivePlantsV1"
	PlantsAPI_GetArchivedPlantsV1_FullMethodName      = "/plants.v1.PlantsAPI/GetArchivedPlantsV1"
	PlantsAPI_ListPlantTypesV1_FullMethodName         = "/plants.v1.PlantsAPI/ListPlantTypesV1"
)

// PlantsAPIClient is the client API for PlantsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantsAPIClient interface {
	GetPlantsWithCareRulesV1(ctx context.Context, in *GetPlantsWithCareRulesV1Request, opts ...grpc.CallOption) (*GetPlantsWithCareRulesV1Response, error)
	CreateNewCareRuleV1(ctx context.Context, in *CreateNewCareRuleV1Request, opts ...grpc.CallOption) (*CreateNewCareRuleV1Response, error)
	GetPlantByIdV1(ctx context.Context, in *GetPlantByIdV1Request, opts ...grpc.CallOption) (*GetPlantByIdV1Response, error)
	GetCareRuleV1(ctx context.Context, in *GetCareRuleV1Request, opts ...grpc.CallOption) (*GetCareRuleV1Response, error)
	CreatePlantV1(ctx context.Context, in *CreatePlantV1Request, opts ...grpc.CallOption) (*CreatePlantV1Response, error)
	GetPlantsForTradeV1(ctx context.Context, in *GetPlantsForTradeV1Request, opts ...grpc.CallOption) (*GetPlantsForTradeV1Response, error)
	GetPlantsV1(ctx context.Context, in *GetPlantsV1Request, opts ...grpc.CallOption) (*GetPlantsV1Response, error)
	BuyPlantV1(ctx context.Context, in *BuyPlantV1Request, opts ...grpc.CallOption) (*BuyPlantV1Response, error)
	GetBoughtPlantsV1(ctx context.Context, in *GetBoughtPlantsV1Request, opts ...grpc.CallOption) (*GetBoughtPlantsV1Response, error)
	GetTradedPlantsV1(ctx context.Context, in *GetTradedPlantsV1Request, opts ...grpc.CallOption) (*GetTradedPlantsV1Response, error)
	GetActivePlantsV1(ctx context.Context, in *GetActivePlantsV1Request, opts ...grpc.CallOption) (*GetActivePlantsV1Response, error)
	GetArchivedPlantsV1(ctx context.Context, in *GetArchivedPlantsV1Request, opts ...grpc.CallOption) (*GetArchivedPlantsV1Response, error)
	ListPlantTypesV1(ctx context.Context, in *GetPlantTypesV1Request, opts ...grpc.CallOption) (*GetPlantTypesV1Response, error)
}

type plantsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsAPIClient(cc grpc.ClientConnInterface) PlantsAPIClient {
	return &plantsAPIClient{cc}
}

func (c *plantsAPIClient) GetPlantsWithCareRulesV1(ctx context.Context, in *GetPlantsWithCareRulesV1Request, opts ...grpc.CallOption) (*GetPlantsWithCareRulesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlantsWithCareRulesV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetPlantsWithCareRulesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) CreateNewCareRuleV1(ctx context.Context, in *CreateNewCareRuleV1Request, opts ...grpc.CallOption) (*CreateNewCareRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewCareRuleV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_CreateNewCareRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetPlantByIdV1(ctx context.Context, in *GetPlantByIdV1Request, opts ...grpc.CallOption) (*GetPlantByIdV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlantByIdV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetPlantByIdV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetCareRuleV1(ctx context.Context, in *GetCareRuleV1Request, opts ...grpc.CallOption) (*GetCareRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCareRuleV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetCareRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) CreatePlantV1(ctx context.Context, in *CreatePlantV1Request, opts ...grpc.CallOption) (*CreatePlantV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlantV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_CreatePlantV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetPlantsForTradeV1(ctx context.Context, in *GetPlantsForTradeV1Request, opts ...grpc.CallOption) (*GetPlantsForTradeV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlantsForTradeV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetPlantsForTradeV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetPlantsV1(ctx context.Context, in *GetPlantsV1Request, opts ...grpc.CallOption) (*GetPlantsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlantsV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetPlantsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) BuyPlantV1(ctx context.Context, in *BuyPlantV1Request, opts ...grpc.CallOption) (*BuyPlantV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuyPlantV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_BuyPlantV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetBoughtPlantsV1(ctx context.Context, in *GetBoughtPlantsV1Request, opts ...grpc.CallOption) (*GetBoughtPlantsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBoughtPlantsV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetBoughtPlantsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetTradedPlantsV1(ctx context.Context, in *GetTradedPlantsV1Request, opts ...grpc.CallOption) (*GetTradedPlantsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradedPlantsV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetTradedPlantsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetActivePlantsV1(ctx context.Context, in *GetActivePlantsV1Request, opts ...grpc.CallOption) (*GetActivePlantsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivePlantsV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetActivePlantsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) GetArchivedPlantsV1(ctx context.Context, in *GetArchivedPlantsV1Request, opts ...grpc.CallOption) (*GetArchivedPlantsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArchivedPlantsV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_GetArchivedPlantsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsAPIClient) ListPlantTypesV1(ctx context.Context, in *GetPlantTypesV1Request, opts ...grpc.CallOption) (*GetPlantTypesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlantTypesV1Response)
	err := c.cc.Invoke(ctx, PlantsAPI_ListPlantTypesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsAPIServer is the server API for PlantsAPI service.
// All implementations must embed UnimplementedPlantsAPIServer
// for forward compatibility.
type PlantsAPIServer interface {
	GetPlantsWithCareRulesV1(context.Context, *GetPlantsWithCareRulesV1Request) (*GetPlantsWithCareRulesV1Response, error)
	CreateNewCareRuleV1(context.Context, *CreateNewCareRuleV1Request) (*CreateNewCareRuleV1Response, error)
	GetPlantByIdV1(context.Context, *GetPlantByIdV1Request) (*GetPlantByIdV1Response, error)
	GetCareRuleV1(context.Context, *GetCareRuleV1Request) (*GetCareRuleV1Response, error)
	CreatePlantV1(context.Context, *CreatePlantV1Request) (*CreatePlantV1Response, error)
	GetPlantsForTradeV1(context.Context, *GetPlantsForTradeV1Request) (*GetPlantsForTradeV1Response, error)
	GetPlantsV1(context.Context, *GetPlantsV1Request) (*GetPlantsV1Response, error)
	BuyPlantV1(context.Context, *BuyPlantV1Request) (*BuyPlantV1Response, error)
	GetBoughtPlantsV1(context.Context, *GetBoughtPlantsV1Request) (*GetBoughtPlantsV1Response, error)
	GetTradedPlantsV1(context.Context, *GetTradedPlantsV1Request) (*GetTradedPlantsV1Response, error)
	GetActivePlantsV1(context.Context, *GetActivePlantsV1Request) (*GetActivePlantsV1Response, error)
	GetArchivedPlantsV1(context.Context, *GetArchivedPlantsV1Request) (*GetArchivedPlantsV1Response, error)
	ListPlantTypesV1(context.Context, *GetPlantTypesV1Request) (*GetPlantTypesV1Response, error)
	mustEmbedUnimplementedPlantsAPIServer()
}

// UnimplementedPlantsAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlantsAPIServer struct{}

func (UnimplementedPlantsAPIServer) GetPlantsWithCareRulesV1(context.Context, *GetPlantsWithCareRulesV1Request) (*GetPlantsWithCareRulesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantsWithCareRulesV1 not implemented")
}
func (UnimplementedPlantsAPIServer) CreateNewCareRuleV1(context.Context, *CreateNewCareRuleV1Request) (*CreateNewCareRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCareRuleV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetPlantByIdV1(context.Context, *GetPlantByIdV1Request) (*GetPlantByIdV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantByIdV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetCareRuleV1(context.Context, *GetCareRuleV1Request) (*GetCareRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCareRuleV1 not implemented")
}
func (UnimplementedPlantsAPIServer) CreatePlantV1(context.Context, *CreatePlantV1Request) (*CreatePlantV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlantV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetPlantsForTradeV1(context.Context, *GetPlantsForTradeV1Request) (*GetPlantsForTradeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantsForTradeV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetPlantsV1(context.Context, *GetPlantsV1Request) (*GetPlantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantsV1 not implemented")
}
func (UnimplementedPlantsAPIServer) BuyPlantV1(context.Context, *BuyPlantV1Request) (*BuyPlantV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyPlantV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetBoughtPlantsV1(context.Context, *GetBoughtPlantsV1Request) (*GetBoughtPlantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoughtPlantsV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetTradedPlantsV1(context.Context, *GetTradedPlantsV1Request) (*GetTradedPlantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradedPlantsV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetActivePlantsV1(context.Context, *GetActivePlantsV1Request) (*GetActivePlantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlantsV1 not implemented")
}
func (UnimplementedPlantsAPIServer) GetArchivedPlantsV1(context.Context, *GetArchivedPlantsV1Request) (*GetArchivedPlantsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedPlantsV1 not implemented")
}
func (UnimplementedPlantsAPIServer) ListPlantTypesV1(context.Context, *GetPlantTypesV1Request) (*GetPlantTypesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlantTypesV1 not implemented")
}
func (UnimplementedPlantsAPIServer) mustEmbedUnimplementedPlantsAPIServer() {}
func (UnimplementedPlantsAPIServer) testEmbeddedByValue()                   {}

// UnsafePlantsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantsAPIServer will
// result in compilation errors.
type UnsafePlantsAPIServer interface {
	mustEmbedUnimplementedPlantsAPIServer()
}

func RegisterPlantsAPIServer(s grpc.ServiceRegistrar, srv PlantsAPIServer) {
	// If the following call pancis, it indicates UnimplementedPlantsAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlantsAPI_ServiceDesc, srv)
}

func _PlantsAPI_GetPlantsWithCareRulesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsWithCareRulesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetPlantsWithCareRulesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetPlantsWithCareRulesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetPlantsWithCareRulesV1(ctx, req.(*GetPlantsWithCareRulesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_CreateNewCareRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewCareRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).CreateNewCareRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_CreateNewCareRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).CreateNewCareRuleV1(ctx, req.(*CreateNewCareRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetPlantByIdV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantByIdV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetPlantByIdV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetPlantByIdV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetPlantByIdV1(ctx, req.(*GetPlantByIdV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetCareRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCareRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetCareRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetCareRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetCareRuleV1(ctx, req.(*GetCareRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_CreatePlantV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlantV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).CreatePlantV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_CreatePlantV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).CreatePlantV1(ctx, req.(*CreatePlantV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetPlantsForTradeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsForTradeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetPlantsForTradeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetPlantsForTradeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetPlantsForTradeV1(ctx, req.(*GetPlantsForTradeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetPlantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetPlantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetPlantsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetPlantsV1(ctx, req.(*GetPlantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_BuyPlantV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyPlantV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).BuyPlantV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_BuyPlantV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).BuyPlantV1(ctx, req.(*BuyPlantV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetBoughtPlantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoughtPlantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetBoughtPlantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetBoughtPlantsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetBoughtPlantsV1(ctx, req.(*GetBoughtPlantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetTradedPlantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradedPlantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetTradedPlantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetTradedPlantsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetTradedPlantsV1(ctx, req.(*GetTradedPlantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetActivePlantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePlantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetActivePlantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetActivePlantsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetActivePlantsV1(ctx, req.(*GetActivePlantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_GetArchivedPlantsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedPlantsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).GetArchivedPlantsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_GetArchivedPlantsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).GetArchivedPlantsV1(ctx, req.(*GetArchivedPlantsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsAPI_ListPlantTypesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantTypesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsAPIServer).ListPlantTypesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantsAPI_ListPlantTypesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsAPIServer).ListPlantTypesV1(ctx, req.(*GetPlantTypesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantsAPI_ServiceDesc is the grpc.ServiceDesc for PlantsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plants.v1.PlantsAPI",
	HandlerType: (*PlantsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlantsWithCareRulesV1",
			Handler:    _PlantsAPI_GetPlantsWithCareRulesV1_Handler,
		},
		{
			MethodName: "CreateNewCareRuleV1",
			Handler:    _PlantsAPI_CreateNewCareRuleV1_Handler,
		},
		{
			MethodName: "GetPlantByIdV1",
			Handler:    _PlantsAPI_GetPlantByIdV1_Handler,
		},
		{
			MethodName: "GetCareRuleV1",
			Handler:    _PlantsAPI_GetCareRuleV1_Handler,
		},
		{
			MethodName: "CreatePlantV1",
			Handler:    _PlantsAPI_CreatePlantV1_Handler,
		},
		{
			MethodName: "GetPlantsForTradeV1",
			Handler:    _PlantsAPI_GetPlantsForTradeV1_Handler,
		},
		{
			MethodName: "GetPlantsV1",
			Handler:    _PlantsAPI_GetPlantsV1_Handler,
		},
		{
			MethodName: "BuyPlantV1",
			Handler:    _PlantsAPI_BuyPlantV1_Handler,
		},
		{
			MethodName: "GetBoughtPlantsV1",
			Handler:    _PlantsAPI_GetBoughtPlantsV1_Handler,
		},
		{
			MethodName: "GetTradedPlantsV1",
			Handler:    _PlantsAPI_GetTradedPlantsV1_Handler,
		},
		{
			MethodName: "GetActivePlantsV1",
			Handler:    _PlantsAPI_GetActivePlantsV1_Handler,
		},
		{
			MethodName: "GetArchivedPlantsV1",
			Handler:    _PlantsAPI_GetArchivedPlantsV1_Handler,
		},
		{
			MethodName: "ListPlantTypesV1",
			Handler:    _PlantsAPI_ListPlantTypesV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plants/v1/plants.proto",
}
