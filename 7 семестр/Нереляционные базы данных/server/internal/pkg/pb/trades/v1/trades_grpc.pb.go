// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: trades/v1/trades.proto

package trades_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trades_GetTradeInV1_FullMethodName  = "/trades.v1.Trades/GetTradeInV1"
	Trades_GetTradeOutV1_FullMethodName = "/trades.v1.Trades/GetTradeOutV1"
	Trades_PostTradeV1_FullMethodName   = "/trades.v1.Trades/PostTradeV1"
	Trades_AcceptTradeV1_FullMethodName = "/trades.v1.Trades/AcceptTradeV1"
	Trades_RejectTradeV1_FullMethodName = "/trades.v1.Trades/RejectTradeV1"
	Trades_PostBuyV1_FullMethodName     = "/trades.v1.Trades/PostBuyV1"
)

// TradesClient is the client API for Trades service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradesClient interface {
	GetTradeInV1(ctx context.Context, in *GetTradeInV1Request, opts ...grpc.CallOption) (*GetTradeInV1Response, error)
	GetTradeOutV1(ctx context.Context, in *GetTradeOutV1Request, opts ...grpc.CallOption) (*GetTradeOutV1Response, error)
	PostTradeV1(ctx context.Context, in *PostTradeV1Request, opts ...grpc.CallOption) (*PostTradeV1Response, error)
	AcceptTradeV1(ctx context.Context, in *AcceptTradeV1Request, opts ...grpc.CallOption) (*AcceptTradeV1Response, error)
	RejectTradeV1(ctx context.Context, in *RejectTradeV1Request, opts ...grpc.CallOption) (*RejectTradeV1Response, error)
	PostBuyV1(ctx context.Context, in *PostBuyV1Request, opts ...grpc.CallOption) (*PostBuyV1Response, error)
}

type tradesClient struct {
	cc grpc.ClientConnInterface
}

func NewTradesClient(cc grpc.ClientConnInterface) TradesClient {
	return &tradesClient{cc}
}

func (c *tradesClient) GetTradeInV1(ctx context.Context, in *GetTradeInV1Request, opts ...grpc.CallOption) (*GetTradeInV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradeInV1Response)
	err := c.cc.Invoke(ctx, Trades_GetTradeInV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) GetTradeOutV1(ctx context.Context, in *GetTradeOutV1Request, opts ...grpc.CallOption) (*GetTradeOutV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTradeOutV1Response)
	err := c.cc.Invoke(ctx, Trades_GetTradeOutV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) PostTradeV1(ctx context.Context, in *PostTradeV1Request, opts ...grpc.CallOption) (*PostTradeV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTradeV1Response)
	err := c.cc.Invoke(ctx, Trades_PostTradeV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) AcceptTradeV1(ctx context.Context, in *AcceptTradeV1Request, opts ...grpc.CallOption) (*AcceptTradeV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptTradeV1Response)
	err := c.cc.Invoke(ctx, Trades_AcceptTradeV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) RejectTradeV1(ctx context.Context, in *RejectTradeV1Request, opts ...grpc.CallOption) (*RejectTradeV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectTradeV1Response)
	err := c.cc.Invoke(ctx, Trades_RejectTradeV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) PostBuyV1(ctx context.Context, in *PostBuyV1Request, opts ...grpc.CallOption) (*PostBuyV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostBuyV1Response)
	err := c.cc.Invoke(ctx, Trades_PostBuyV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradesServer is the server API for Trades service.
// All implementations must embed UnimplementedTradesServer
// for forward compatibility.
type TradesServer interface {
	GetTradeInV1(context.Context, *GetTradeInV1Request) (*GetTradeInV1Response, error)
	GetTradeOutV1(context.Context, *GetTradeOutV1Request) (*GetTradeOutV1Response, error)
	PostTradeV1(context.Context, *PostTradeV1Request) (*PostTradeV1Response, error)
	AcceptTradeV1(context.Context, *AcceptTradeV1Request) (*AcceptTradeV1Response, error)
	RejectTradeV1(context.Context, *RejectTradeV1Request) (*RejectTradeV1Response, error)
	PostBuyV1(context.Context, *PostBuyV1Request) (*PostBuyV1Response, error)
	mustEmbedUnimplementedTradesServer()
}

// UnimplementedTradesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradesServer struct{}

func (UnimplementedTradesServer) GetTradeInV1(context.Context, *GetTradeInV1Request) (*GetTradeInV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeInV1 not implemented")
}
func (UnimplementedTradesServer) GetTradeOutV1(context.Context, *GetTradeOutV1Request) (*GetTradeOutV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeOutV1 not implemented")
}
func (UnimplementedTradesServer) PostTradeV1(context.Context, *PostTradeV1Request) (*PostTradeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTradeV1 not implemented")
}
func (UnimplementedTradesServer) AcceptTradeV1(context.Context, *AcceptTradeV1Request) (*AcceptTradeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTradeV1 not implemented")
}
func (UnimplementedTradesServer) RejectTradeV1(context.Context, *RejectTradeV1Request) (*RejectTradeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTradeV1 not implemented")
}
func (UnimplementedTradesServer) PostBuyV1(context.Context, *PostBuyV1Request) (*PostBuyV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBuyV1 not implemented")
}
func (UnimplementedTradesServer) mustEmbedUnimplementedTradesServer() {}
func (UnimplementedTradesServer) testEmbeddedByValue()                {}

// UnsafeTradesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradesServer will
// result in compilation errors.
type UnsafeTradesServer interface {
	mustEmbedUnimplementedTradesServer()
}

func RegisterTradesServer(s grpc.ServiceRegistrar, srv TradesServer) {
	// If the following call pancis, it indicates UnimplementedTradesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trades_ServiceDesc, srv)
}

func _Trades_GetTradeInV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeInV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).GetTradeInV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_GetTradeInV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).GetTradeInV1(ctx, req.(*GetTradeInV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_GetTradeOutV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeOutV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).GetTradeOutV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_GetTradeOutV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).GetTradeOutV1(ctx, req.(*GetTradeOutV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_PostTradeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTradeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).PostTradeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_PostTradeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).PostTradeV1(ctx, req.(*PostTradeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_AcceptTradeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTradeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).AcceptTradeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_AcceptTradeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).AcceptTradeV1(ctx, req.(*AcceptTradeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_RejectTradeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTradeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).RejectTradeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_RejectTradeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).RejectTradeV1(ctx, req.(*RejectTradeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_PostBuyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBuyV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).PostBuyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trades_PostBuyV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).PostBuyV1(ctx, req.(*PostBuyV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Trades_ServiceDesc is the grpc.ServiceDesc for Trades service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trades_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trades.v1.Trades",
	HandlerType: (*TradesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTradeInV1",
			Handler:    _Trades_GetTradeInV1_Handler,
		},
		{
			MethodName: "GetTradeOutV1",
			Handler:    _Trades_GetTradeOutV1_Handler,
		},
		{
			MethodName: "PostTradeV1",
			Handler:    _Trades_PostTradeV1_Handler,
		},
		{
			MethodName: "AcceptTradeV1",
			Handler:    _Trades_AcceptTradeV1_Handler,
		},
		{
			MethodName: "RejectTradeV1",
			Handler:    _Trades_RejectTradeV1_Handler,
		},
		{
			MethodName: "PostBuyV1",
			Handler:    _Trades_PostBuyV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trades/v1/trades.proto",
}
